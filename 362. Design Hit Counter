/*
class HitCounter {
public:
   
    vector<int> hitTime;
    HitCounter() {
        hitTime = vector<int>{};
    }
  
    void hit(int timestamp) {
        hitTime.push_back(timestamp);
    }
    
  
    int getHits(int timestamp) {
        if (hitTime.empty()) return 0;
        int target = timestamp - 299;
        int start = 0;
        int end = hitTime.size() - 1;
        while (start + 1 < end) {
            int mid = (start + end) / 2;
            if (hitTime[mid] < target) {
                start = mid;
            }
            else if (hitTime[mid] >= target) {
                end = mid;
            }
        }
        if (hitTime[start] >= target) return hitTime.size() - start;
        else if (hitTime[end] >= target) return hitTime.size() - end;
        else return 0;
    }
};
*/
/*
class HitCounter {
    public:
    queue<int> myqueue;
    HitCounter(){}
    
    void hit(int timestamp) {
        myqueue.push(timestamp);
    }
    
    int getHits(int timestamp) {
        while (!myqueue.empty() && myqueue.front() + 300 <= timestamp) {
            myqueue.pop();
        }
        return myqueue.size();
    }
};
*/
class HitCounter {
    private:
    vector<int> timestamps;
    vector<int> hits;
    public:
    HitCounter() {
        timestamps = vector<int>(300, 0);
        hits = vector<int>(300, 0);
    }  
    void hit(int timestamp) {
        int index = timestamp % 300;
        if (timestamp == timestamps[index]) {
            hits[index] ++;
        }
        else {
            timestamps[index] = timestamp;
            hits[index] = 1;
        }
    }
    int getHits(int timestamp) {
        int ans = 0;
        for (int i = 0; i < 300; i++) {
            if (timestamp - timestamps[i] < 300) {
                ans += hits[i];
            }   
        }
        return ans;         
    }
};
