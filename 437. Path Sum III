class Solution {
public:
    /*
    int pathSum(TreeNode* root, int sum) {
        int ans = 0;
        vector<int> Paths;
        helper(root, Paths, ans, sum);
        return ans;
    }
    void helper(TreeNode * root, vector<int> Paths, int & ans, int sum) {
        if (root == NULL) return;
        for (int i = 0; i < Paths.size(); i++) {
            
            Paths[i] += root -> val;
            if (Paths[i] == sum) ans++; 
        }
        if (root -> val ==  sum) ans++;
        Paths.push_back(root -> val);
        helper(root -> left, Paths, ans, sum);
        helper(root -> right, Paths, ans, sum);
    }
    */
    int pathSum(TreeNode* root, int sum) {
        if (root == NULL) return 0;
        return pathSumFrom(root, sum) + pathSumFrom(root -> left, sum) + pathSumFrom(root ->right, sum);
    }
    
    int pathSumFrom(TreeNode * root, int sum) {
        if (root == NULL) return 0;
        int i = 0;
        if (root -> val == sum)  i = 1;
        return i + pathSumFrom(root -> left, sum - root -> val) + pathSumFrom(root -> right, sum - root -> val);
    }
};
